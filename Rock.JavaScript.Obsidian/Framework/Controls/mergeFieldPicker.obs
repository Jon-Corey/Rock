<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <TreeItemPicker
                    v-bind="standardFieldProps"
                    :modelValue="(pagePickerValue as ListItemBag[])"
                    @update:modelValue="updatePage"
                    formGroupClasses="location-item-picker"
                    iconCssClass="fa fa-file"
                    :provider="itemProvider"
                    :multiple="multiple"
                    :autoExpand="true">
    </TreeItemPicker>
</template>

<script setup lang="ts">
    import { computed, PropType, ref, watch } from "vue";
    import { ListItemBag } from "@Obsidian/ViewModels/Utility/listItemBag";
    import TreeItemPicker from "./treeItemPicker.obs";
    import { PageRouteValueBag } from "@Obsidian/ViewModels/Rest/Controls/pageRouteValueBag";
    import { MergeFieldTreeItemProvider } from "@Obsidian/Utility/treeItemProviders";
    import { emptyGuid } from "@Obsidian/Utility/guid";
    import { standardRockFormFieldProps, useStandardRockFormFieldProps } from "@Obsidian/Utility/component";
    import { useSecurityGrantToken } from "@Obsidian/Utility/block";

    const props = defineProps({
        modelValue: {
            type: Object as PropType<PageRouteValueBag | PageRouteValueBag[] | null>,
            required: false
        },

        additionalFields: {
            type: String,
            required: true
        },

        securityGrantToken: {
            type: String as PropType<string | null>,
            required: false
        },

        /**
         * Whether to allow multi-select or single-select
         */
        multiple: {
            type: Boolean as PropType<boolean>,
            default: false
        },

        ...standardRockFormFieldProps
    });

    const emit = defineEmits<{
        (e: "update:modelValue", value: PageRouteValueBag | PageRouteValueBag[] | null): void
    }>();

    const standardFieldProps = useStandardRockFormFieldProps(props);

    // Extract the page value(s) from the the PageRouteValueBag(s) so they can be used with the tree picker
    const internalPageValue = computed<ListItemBag | (ListItemBag | null | undefined)[] | null | undefined>(() => {
        if (!props.modelValue) {
            return null;
        }
        if (Array.isArray(props.modelValue)) {
            if (props.multiple) {
                return props.modelValue.map(item => item.page);
            }
            emit("update:modelValue", { page: props.modelValue[0].page });
            return props.modelValue[0].page;
        }

        return props.modelValue.page;
    });

    // This value is used for TreePicker to show the route in parentheses if a route is chosen
    const pagePickerValue = computed<ListItemBag | (ListItemBag | null | undefined)[] | null | undefined>(() => {
        return internalPageValue.value;
    });

    // Set the page value
    function updatePage(pages: ListItemBag | ListItemBag[] | null): void {
        if (!pages) {
            if (props.multiple) {
                emit("update:modelValue", []);
            }
            else {
                emit("update:modelValue", null);
            }
        }
        else if (props.multiple) {
            // When `multiple`, we can assume we're receiving an array
            emit("update:modelValue", (pages as ListItemBag[]).map(page => ({ page })));
        }
        else if ((pages as ListItemBag).value == (internalPageValue.value as ListItemBag)?.value) {
            // In this case, the user hit "select" without choosing a different option, so reset the value to the current page (no route)
            emit("update:modelValue", { page: internalPageValue.value as ListItemBag });
        }
        else {
            // When page is updated, no route will be picked, so just use the page property
            emit("update:modelValue", { page: pages as ListItemBag });
        }
    }

    // Configure the item provider with our settings.
    const itemProvider = ref(new MergeFieldTreeItemProvider());

    function updateItemProvider(): void {
        const prov = new MergeFieldTreeItemProvider();
        prov.securityGrantToken = props.securityGrantToken;
        prov.additionalFields = props.additionalFields;

        if (internalPageValue.value) {
            if (Array.isArray(internalPageValue.value)) {
                prov.selectedIds = internalPageValue.value.map(p => p?.value ?? emptyGuid);
            }
            else {
                prov.selectedIds = [internalPageValue.value.value ?? emptyGuid];
            }
        }

        itemProvider.value = prov;
    }

    watch(() => [props.securityGrantToken, props.additionalFields], updateItemProvider, { immediate: true });

</script>