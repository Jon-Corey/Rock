<template>
    <div ref="filterBodyElement" class="grid-filter-popup-body">
        <DropDownList v-model="searchMethod"
                      inputClasses="mb-2"
                      :showBlankItem="false"
                      :items="searchTypeItems" />

        <div v-if="showFirstValue" class="mb-2">
            <DatePicker v-model="searchValue" :container="popupContainerElement" />
        </div>

        <div v-if="showSecondValue" class="mb-2">
            <DatePicker v-model="secondSearchValue" :container="popupContainerElement" />
        </div>
    </div>
</template>

<script setup lang="ts">
    import DatePicker from "@Obsidian/Controls/datePicker.obs";
    import { ref, watch, computed } from "vue";
    import DropDownList from "@Obsidian/Controls/dropDownList";
    import { ListItemBag } from "@Obsidian/ViewModels/Utility/listItemBag";
    import { DateFilterMethod, DateFilterMethodDescription } from "@Obsidian/Enums/Controls/Grid/dateFilterMethod";
    import { standardFilterProps } from "@Obsidian/Core/Controls/grid";

    type DateSearchBag = {
        method: DateFilterMethod;

        value?: string;

        secondValue?: string;
    };

    const props = defineProps(standardFilterProps);

    const emit = defineEmits<{
        (e: "update:modelValue", value: unknown): void
    }>();

    const searchMethod = ref(DateFilterMethod.Equals.toString());
    const searchValue = ref<string | null>(null);
    const secondSearchValue = ref<string | null>(null);
    const filterBodyElement = ref<HTMLElement | null>(null);

    const searchTypeItems = ref<ListItemBag[]>(Object.keys(DateFilterMethodDescription).map(n => {
        return {
            value: n,
            text: DateFilterMethodDescription[n]
        };
    }));

    const popupContainerElement = computed((): HTMLElement | null => {
        return filterBodyElement.value?.closest(".grid-filter-popup") ?? null;
    });

    const showFirstValue = computed((): boolean => {
        return searchMethod.value === DateFilterMethod.Equals.toString()
            || searchMethod.value === DateFilterMethod.DoesNotEqual.toString()
            || searchMethod.value === DateFilterMethod.Before.toString()
            || searchMethod.value === DateFilterMethod.After.toString()
            || searchMethod.value === DateFilterMethod.Between.toString();
    });

    const showSecondValue = computed((): boolean => {
        return searchMethod.value === DateFilterMethod.Between.toString();
    });

    function updateModelValue(): void {
        if (searchValue.value === null && showFirstValue.value) {
            emit("update:modelValue", undefined);
            return;
        }

        const searchBag: DateSearchBag = {
            method: Number(searchMethod.value) as DateFilterMethod,
            value: searchValue.value ?? undefined,
            secondValue: secondSearchValue.value ?? undefined
        };

        emit("update:modelValue", searchBag);
    }

    function updateSearchValues(): void {
        if (props.modelValue && typeof props.modelValue === "object") {
            const modelSearchBag = props.modelValue as Partial<DateSearchBag>;

            if (modelSearchBag.method !== undefined) {
                searchMethod.value = modelSearchBag.method.toString();
                searchValue.value = modelSearchBag.value ?? null;
                secondSearchValue.value = modelSearchBag.secondValue ?? null;

                return;
            }
        }

        searchMethod.value = DateFilterMethod.Equals.toString();
        searchValue.value = null;
    }

    watch(() => props.modelValue, () => updateSearchValues());
    watch([searchMethod, searchValue, secondSearchValue], () => updateModelValue());

    updateSearchValues();
</script>
