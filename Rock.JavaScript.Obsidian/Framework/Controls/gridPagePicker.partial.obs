<template>
    <div v-if="hasMultiplePages" class="grid-page-picker">
        <button :class="prevButtonCssClass" @click.prevent="onPrevButtonClick">
            <i class="fa fa-angle-double-left"></i>
        </button>

        <button v-for="pageButton in pageButtons" :class="getPageButtonCssClass(pageButton)" @click.prevent="onPageButtonClick(pageButton)">
            {{ pageButton }}
        </button>

        <button :class="nextButtonCssClass" @click.prevent="onNextButtonClick">
            <i class="fa fa-angle-double-right"></i>
        </button>
    </div>
</template>

<script setup lang="ts">
    import { useVModelPassthrough } from "@Obsidian/Utility/component";
    import { computed, PropType } from "vue";

    const props = defineProps({
        modelValue: {
            type: Number as PropType<number>,
            required: true
        },

        pageCount: {
            type: Number as PropType<number>,
            default: 1
        }
    });

    const emit = defineEmits<{
        (event: "update:modelValue", value: number): void,
    }>();

    const currentPage = useVModelPassthrough(props, "modelValue", emit);

    const pageButtons = computed((): number[] => {
        const firstNumber = Math.max(1, currentPage.value - 3);
        const lastNumber = Math.min(props.pageCount, currentPage.value + 3);
        const values: number[] = [];

        for (let i = firstNumber; i <= lastNumber; i++) {
            values.push(i);
        }

        return values;
    });

    const prevButtonCssClass = computed((): string => {
        return currentPage.value > 1 ? "prev" : "prev disabled";
    });

    const nextButtonCssClass = computed((): string => {
        return currentPage.value < props.pageCount ? "next" : "next disabled";
    });

    const hasMultiplePages = computed((): boolean => {
        return props.pageCount > 1;
    });

    const getPageButtonCssClass = (pageButton: number): string | undefined => {
        return pageButton === currentPage.value ? "active" : undefined;
    };

    const onPageButtonClick = (pageButton: number): void => {
        currentPage.value = pageButton;
    };

    const onPrevButtonClick = (): void => {
        currentPage.value = Math.max(1, currentPage.value - 1);
    };

    const onNextButtonClick = (): void => {
        currentPage.value = Math.min(props.pageCount, currentPage.value + 1);
    };
</script>
