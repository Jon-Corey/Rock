<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <Grid :data="loadGridData">
        <Column name="name" title="Name" sortValue="{{ row.name.lastName }} {{ row.name.firstName }}" :filter="textColumnFilter" filterValue="{{ row.name.firstName }} {{  row.name.lastName }}">
            <template #body="{ row }">
                {{ row.name.firstName }} {{ row.name.lastName }}
            </template>
        </Column>

        <Column name="email" title="Email" field="email" sortField="email" :filter="textColumnFilter" />

        <Column name="enteredDateTime" title="Entered On" field="enteredDateTime" sortField="enteredDateTime">
            <template #body="{ row }">
                {{ formatDate(row.enteredDateTime) }}
            </template>
        </Column>

        <DateColumn name="expirationDateTime" title="Expires" field="expirationDateTime" sortField="expirationDateTime" />

        <!-- <BooleanColumn name="isUrgent" title="Urgent" field="isUrgent" sortField="isUrgent" /> -->

    <!--
        <BadgeColumn name="isUrgent"
                          title="Urgent"
                          field="isUrgent"
                          sortField="isUrgent"
                          :classSource="badgeClassLookup" />
            -->

    <!--
        <Column name="isUrgent"
                title="Urgent"
                field="isUrgent"
                sortField="isUrgent">
            <template #body="{ row }">
                <span v-if="row.isUrgent"
                      class="label label-success">
                    {{ row.isUrgent }}
                </span>
                <span v-else
                      class="label label-danger">
                    {{ row.isUrgent }}
                </span>
            </template>
        </Column>
            -->

        <ColoredBadgeColumn name="mode"
                            title="Mode"
                            field="mode" />

        <BooleanColumn name="isPublic"
                       title="Public"
                       field="isPublic"
                       sortField="isPublic" />

        <AttributeColumns :attributes="attributeColumns" />
    </Grid>
</template>

<script setup lang="ts">
    // #region Imports
    import TextBox from "@Obsidian/Controls/textBox";
    import { useConfigurationValues, useInvokeBlockAction } from "@Obsidian/Utility/block";
    import { Component, computed, defineComponent, PropType, ref, VNode, watch } from "vue";
    import { RockDateTime } from "@Obsidian/Utility/rockDateTime";
    import Grid from "./GridTest/grid.obs";
    import { AttributeColumnDefinition, FilterComponentProps, GridColumnDefinition, GridData, GridDefinition, IGridColumnFilter } from "./GridTest/types";
    import { ListItemBag } from "@Obsidian/ViewModels/Utility/listItemBag";

    const standardColumnProps = {
        name: {
                type: String as PropType<string>,
                default: ""
            },

            title: {
                type: String as PropType<string>,
                required: false
            },

            sortField: {
                type: String as PropType<string>,
                required: false
            },

            sortValue: {
                type: Object as PropType<(((row: Record<string, unknown>, column: GridColumnDefinition) => string | number | undefined) | string)>,
                required: false
            },

            filter: {
                type: Object as PropType<IGridColumnFilter>,
                required: false
            },

            filterValue: {
                type: Object as PropType<(((row: Record<string, unknown>, column: GridColumnDefinition) => string | number | undefined) | string)>,
                required: false
            }
    };

    // eslint-disable-next-line @typescript-eslint/naming-convention,@typescript-eslint/no-unused-vars
    const Column = defineComponent({
        props: {
            ...standardColumnProps
        }
    });

    const dateColumnValueComponent = defineComponent({
        props: {
            column: {
                type: Object as PropType<GridColumnDefinition>,
                required: true
            },
            row: {
                type: Object as PropType<Record<string, unknown>>,
                required: true
            }
        },

        setup(props) {
            const formattedValue = computed(() => {
                if (props.column.field) {
                    return RockDateTime.parseISO(props.row[props.column.field] as string)?.toASPString("d") ?? "";
                }
                else {
                    return "";
                }
            });

            return {
                formattedValue
            };
        },

        template: `{{ formattedValue }}`
    });

    // eslint-disable-next-line @typescript-eslint/naming-convention
    const DateColumn = defineComponent({
        props: {
            ...standardColumnProps,

            format: {
                type: Object as PropType<VNode>,
                required: false,
                default: dateColumnValueComponent
            }
        }
    });

    const booleanColumnValueComponent = defineComponent({
        props: {
            column: {
                type: Object as PropType<GridColumnDefinition>,
                required: true
            },
            row: {
                type: Object as PropType<Record<string, unknown>>,
                required: true
            }
        },

        setup(props) {
            const isTrue = computed(() => {
                if (props.column.field) {
                    return props.row[props.column.field] === true;
                }
                else {
                    return false;
                }
            });

            return {
                isTrue
            };
        },

        template: `<i v-if="isTrue" class="fa fa-check"></i>`
    });

    function booleanColumnSortValue(row: Record<string, unknown>, column: GridColumnDefinition): number | undefined {
        if (!column.sortField) {
            return undefined;
        }

        return row[column.sortField] === true ? 1 : 0;
    }

    // eslint-disable-next-line @typescript-eslint/naming-convention,@typescript-eslint/no-unused-vars
    const BooleanColumn = defineComponent({
        props: {
            ...standardColumnProps,

            format: {
                type: Object as PropType<VNode>,
                required: false,
                default: booleanColumnValueComponent
            }
        }
    });

    const badgeColumnValueComponent = defineComponent({
        props: {
            column: {
                type: Object as PropType<GridColumnDefinition>,
                required: true
            },

            row: {
                type: Object as PropType<Record<string, unknown>>,
                required: true
            }
        },

        setup(props) {
            const text = computed(() => {
                if (props.column.field) {
                    return `${props.row[props.column.field]}`;
                }
                else {
                    return "";
                }
            });

            const labelClass = computed(() => {
                const classSource = props.column.props["classSource"] as Record<string, string>;

                if (classSource && text.value in classSource) {
                    return `label label-${classSource[text.value]}`;
                }
                else {
                    return "label label-default";
                }
            });

            return {
                text,
                labelClass
            };
        },

        template: `<span :class="labelClass">{{ text }}</span>`
    });

    // eslint-disable-next-line @typescript-eslint/naming-convention,@typescript-eslint/no-unused-vars
    const BadgeColumn = defineComponent({
        props: {
            ...standardColumnProps,

            format: {
                type: Object as PropType<VNode>,
                required: false,
                default: badgeColumnValueComponent
            },

            classSource: {
                type: Object as PropType<Record<string, string>>,
                required: false
            }
        }
    });

    const badgeColorColumnValueComponent = defineComponent({
        props: {
            column: {
                type: Object as PropType<GridColumnDefinition>,
                required: true
            },

            row: {
                type: Object as PropType<Record<string, unknown>>,
                required: true
            }
        },

        setup(props) {
            const text = computed(() => {
                if (props.column.field) {
                    return `${props.row[props.column.field]}`;
                }
                else {
                    return "";
                }
            });

            const labelStyle = computed(() => {
                const colorSource = props.column.props["colorSource"] as Record<string, string>;

                if (colorSource && text.value in colorSource) {
                    return {
                        "backgroundColor": colorSource[text.value],
                        "color": "white"
                    };
                }
                else {
                    return {
                        "backgroundColor": "gray",
                        "color": "white"
                    };
                }
            });

            return {
                text,
                labelStyle
            };
        },

        template: `<span class="label label-default" :style="labelStyle">{{ text }}</span>`
    });

    // eslint-disable-next-line @typescript-eslint/naming-convention,@typescript-eslint/no-unused-vars
    const BadgeColorColumn = defineComponent({
        props: {
            ...standardColumnProps,

            format: {
                type: Object as PropType<VNode>,
                required: false,
                default: badgeColorColumnValueComponent
            },

            colorSource: {
                type: Object as PropType<Record<string, string>>,
                required: false
            }
        }
    });

    const coloredBadgeColumnValueComponent = defineComponent({
        props: {
            column: {
                type: Object as PropType<GridColumnDefinition>,
                required: true
            },

            row: {
                type: Object as PropType<Record<string, unknown>>,
                required: true
            }
        },

        setup(props) {
            const text = computed(() => {
                if (props.column.field) {
                    return `${(props.row[props.column.field] as ListItemBag).text}`;
                }
                else {
                    return "";
                }
            });

            const labelStyle = computed(() => {
                if (props.column.field && props.row[props.column.field] && (props.row[props.column.field] as ListItemBag).value) {
                    return {
                        "backgroundColor": (props.row[props.column.field] as ListItemBag).value,
                        "color": "white"
                    };
                }
                else {
                    return {
                        "backgroundColor": "gray",
                        "color": "white"
                    };
                }
            });

            return {
                text,
                labelStyle
            };
        },

        template: `<span class="label label-default" :style="labelStyle">{{ text }}</span>`
    });

    // eslint-disable-next-line @typescript-eslint/naming-convention,@typescript-eslint/no-unused-vars
    const ColoredBadgeColumn = defineComponent({
        props: {
            ...standardColumnProps,

            format: {
                type: Object as PropType<VNode>,
                required: false,
                default: coloredBadgeColumnValueComponent
            }
        }
    });

    function textColumnFilterValue(needle: unknown, haystack: unknown): boolean {
        if (!needle || typeof (needle) !== "string") {
            return false;
        }

        const lowerNeedle = needle.toLowerCase();

        if (haystack && typeof (haystack) === "string") {
            return haystack.toLowerCase().includes(lowerNeedle);
        }

        return false;
    }

    // eslint-disable-next-line @typescript-eslint/naming-convention,@typescript-eslint/no-unused-vars
    const TextColumnFilterComponent: Component<FilterComponentProps> = defineComponent({
        props: {
            modelValue: {
                type: Object as PropType<unknown>,
                required: false
            },

            column: {
                type: Object as PropType<GridColumnDefinition>,
                required: true
            }
        },

        components: {
            TextBox
        },

        setup(props, { emit }) {
            const internalValue = ref(typeof(props.modelValue) === "string" ? props.modelValue : "");

            watch(() => props.modelValue, () => {
                internalValue.value = typeof(props.modelValue) === "string" ? props.modelValue : "";
            });

            watch(internalValue, () => {
                emit("update:modelValue", internalValue.value);
            });

            return {
                internalValue
            };
        },

        template: `
<TextBox v-model="internalValue" />
`
    });

    const textColumnFilter: IGridColumnFilter = {
        component: TextColumnFilterComponent,

        matches: textColumnFilterValue
    };

    // eslint-disable-next-line @typescript-eslint/naming-convention,@typescript-eslint/no-unused-vars
    const AttributeColumns = defineComponent({
        components: {
            Column
        },

        props: {
            attributes: {
                type: Array as PropType<AttributeColumnDefinition[]>,
                default: []
            },

            __attributeColumns: {
                type: Boolean as PropType<boolean>,
                default: true
            }
        }
    });

    // #endregion

    const configuration = useConfigurationValues<{ gridDefinition: GridDefinition }>();
    const invokeBlockAction = useInvokeBlockAction();

    // eslint-disable-next-line @typescript-eslint/naming-convention,@typescript-eslint/no-unused-vars
    const badgeClassLookup = {
        "true": "success",
        "false": "danger"
    };

    // eslint-disable-next-line @typescript-eslint/naming-convention,@typescript-eslint/no-unused-vars
    const badgeColorLookup = {
        "true": "#00cc00",
        "false": "#cc0000"
    };

    const attributeColumns = computed((): AttributeColumnDefinition[] => {
        return configuration.gridDefinition.attributeColumns ?? [];
    });

    const loadGridData = async (): Promise<GridData> => {
        const result = await invokeBlockAction<GridData>("GetGridData");

        if (result.isSuccess && result.data) {
            return {
                rows: result.data.rows
            };
        }
        else {
            throw new Error(result.errorMessage ?? "Unknown error while trying to load grid data.");
        }
    };

    function formatDate(value?: string): string {
        if (!value) {
            return "";
        }

        const dt = RockDateTime.parseISO(value);

        return dt?.toASPString("g") ?? "";
    }
</script>
