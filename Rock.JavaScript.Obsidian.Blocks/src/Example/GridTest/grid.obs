<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <table class="grid-table table table-bordered table-striped table-hover table-obsidian">
        <thead>
            <GridFilterHeaderRow v-model:filterValue="quickFilterValue"
                                 :gridActions="gridActions"
                                 :visibleColumnCount="visibleColumnCount" />

            <GridColumnHeaderRow :columns="visibleColumnDefinitions" v-model:columnFilters="columnFilterValues" v-model:columnSort="columnSortDirection" />
        </thead>

        <tbody>
            <tr v-if="loadingData">
                <td class="grid-error" :colspan="visibleColumnCount">
                    <LoadingIndicator />
                </td>
            </tr>

            <tr v-else-if="gridErrorMessage">
                <td class="grid-error" :colspan="visibleColumnCount">
                    <Alert alertType="warning">{{ gridErrorMessage }}</Alert>
                </td>
            </tr>

            <GridDataRows v-else
                          :columns="visibleColumnDefinitions"
                          :rows="visibleRows" />
        </tbody>

        <tfoot>
            <GridPagerRow v-model:pageSize="pageSize"
                          v-model:currentPage="currentPage"
                          :pageCount="pageCount"
                          :pageSizes="pageSizes"
                          :message="pagerMessage"
                          :visibleColumnCount="visibleColumnCount"
                          :gridActions="gridActions" />
        </tfoot>
    </table>
</template>

<style scoped>
table.table-obsidian th.grid-column-header {
    position: relative;
}

table.table-obsidian th.grid-column-header .btn-grid-column-filter {
    border: 0px;
    background-color: transparent;
    margin-left: 4px;
    color: #e7e7e7;
    opacity: 0.5;
    transition-duration: 250ms;
    transition-property: opacity, color;
}

table.table-obsidian th.grid-column-header .btn-grid-column-filter.active {
    color: var(--brand-success);
}

table.table-obsidian th.grid-column-header:hover .btn-grid-column-filter {
    opacity: 1;
}

table.table-obsidian th.grid-column-header .grid-filter-popup {
    position: absolute;
    padding: 12px;
    margin-top: 6px;
    min-width: 120px;
    max-width: 320px;
    background-color: white;
    border: 1px solid #c7c7c7;
    border-radius: 0px;
    border-bottom-right-radius: 6px;
    border-bottom-left-radius: 6px;
    box-shadow: 2px 2px 4px rgba(0, 0, 0, 0.2);
    font-weight: initial;
}

table.table-obsidian th.grid-column-header .grid-filter-popup .actions {
    border-top: 1px solid #eee;
    margin: 18px -12px 0px -12px;
    padding: 12px 12px 0px 12px;
}

table.table-obsidian th.grid-column-header .resize-handle {
    position: absolute;
    right: 0px;
    top: 0px;
    bottom: 0px;
    width: 2px;
    height: 100%;
    cursor: w-resize;
}

table.table-obsidian th.grid-column-header:hover .resize-handle {
    background-color: #eee;
}

table.table-obsidian td.grid-paging {}

table.table-obsidian td.grid-paging .grid-page-sizes {
    flex: 1 0;
    justify-content: start;
    align-items: center;
}

table.table-obsidian td.grid-paging .grid-page-picker {
    flex: 1 0;
    display: flex;
    justify-content: center;
    align-items: center;
}

table.table-obsidian td.grid-paging .grid-page-picker > button {
    border: 0px;
    background-color: transparent;
    margin: 0px 5px;
    padding: 0px 6px;
}

table.table-obsidian td.grid-paging .grid-page-picker > button.disabled {
    opacity: 0.5;
    pointer-events: none;
}

table.table-obsidian td.grid-paging .grid-page-picker > button.active {
    border: 1px solid #b7b7b7;
    background-color: #f7f7f7;
}

table.table-obsidian td.grid-paging .grid-actions {
    flex: 1 0;
    display: flex;
    justify-content: end;
    align-items: center;
}

table.table-obsidian th.grid-filter {
    padding: 8px;
    font-weight: initial;
}

table.table-obsidian th.grid-filter .grid-quick-filter {
    flex: 1 0;
    max-width: 480px;
}

table.table-obsidian th.grid-filter .grid-actions {
    flex: 1 0;
    display: flex;
    justify-content: end;
    background-color: initial;
}

table.table-obsidian th.grid-error {
    padding: 0px;
}

table.table-obsidian th.grid-error > .alert {
    margin-bottom: 0px;
}
</style>

<script setup lang="ts">
    import { asFormattedString } from "@Obsidian/Utility/numberUtils";
    import { pluralConditional } from "@Obsidian/Utility/stringUtils";
    import Alert from "@Obsidian/Controls/alert.obs";
    import LoadingIndicator from "@Obsidian/Controls/loadingIndicator";
    import { computed, defineComponent, PropType, ref, toRaw, useSlots, VNode, watch } from "vue";
    import GridColumnHeaderRow from "./gridColumnHeaderRow.obs";
    import GridDataRows from "./gridDataRows.obs";
    import GridFilterHeaderRow from "./gridFilterHeaderRow.obs";
    import GridPagerRow from "./gridPagerRow.obs";
    import { AttributeColumnDefinition, GridAction, GridColumnDefinition, GridData } from "./types";

    function getVNodeProp<T>(node: VNode, propName: string): T | undefined {
        if (node.props && node.props[propName] !== undefined) {
            return node.props[propName] as T;
        }

        if (typeof node.type === "object" && typeof node.type["props"] === "object") {
            const defaultProps = node.type["props"] as Record<string, unknown>;
            const defaultProp = defaultProps[propName];
            if (defaultProp && typeof defaultProp === "object" && defaultProp["default"] !== undefined) {
                return defaultProp["default"] as T;
            }
        }

        return undefined;
    }

    function getVNodeProps(node: VNode): Record<string, unknown> {
        const props: Record<string, unknown> = {};

        // Get all default values.
        if (typeof node.type === "object" && typeof node.type["props"] === "object") {
            const defaultProps = node.type["props"] as Record<string, unknown>;

            for (const p in defaultProps) {
                const defaultProp = defaultProps[p];
                console.log("defaultProp", p, defaultProp);

                if (defaultProp && typeof defaultProp === "object" && defaultProp["default"] !== undefined) {
                    props[p] = defaultProp["default"];
                }
            }
        }

        // Get specified values.
        if (node.props) {
            for (const p in node.props) {
                console.log("prop", p, node.props[p]);

                props[p] = node.props[p];
            }
        }

        return props;
    }

    const textColumnValueComponent = defineComponent({
        props: {
            column: {
                type: Object as PropType<GridColumnDefinition>,
                required: true
            },
            row: {
                type: Object as PropType<Record<string, unknown>>,
                required: true
            }
        },

        setup(props) {
            return () => props.column.field ? props.row[props.column.field] : "";
        }
    });

    function textColumnSortValue(row: Record<string, unknown>, column: GridColumnDefinition): string | undefined {
        return column.sortField ? String(row[column.sortField]) : undefined;
    }

    function getColumnDefinitions(columnNodes: VNode[]): GridColumnDefinition[] {
        const columns: GridColumnDefinition[] = [];

        for (const node of columnNodes) {
            console.log("Column Node", node);

            const name = getVNodeProp<string>(node, "name");

            if (!name) {
                if (getVNodeProp<boolean>(node, "__attributeColumns") !== true) {
                    continue;
                }

                const attributes = getVNodeProp<AttributeColumnDefinition[]>(node, "attributes");
                if (!attributes) {
                    continue;
                }

                for (const attribute of attributes) {
                    if (!attribute.name) {
                        continue;
                    }

                    console.log("Attribute", attribute);
                    columns.push({
                        name: attribute.name,
                        title: attribute.title ?? undefined,
                        field: attribute.name,
                        sortField: attribute.name,
                        format: getVNodeProp<VNode>(node, "format") ?? textColumnValueComponent,
                        props: {}
                    });
                }

                continue;
            }

            let sortValue = getVNodeProp<((row: Record<string, unknown>, column: GridColumnDefinition) => string | number | undefined) | string>(node, "sortValue");

            if (typeof sortValue === "string") {
                const template = sortValue;

                sortValue = (row): string | undefined => {
                    const value = template.replace(/\{\{\s*([a-zA-Z.]+)\s*\}\}/g, (_, path: string) => {
                        let pathSegments = path.split(".");

                        if (pathSegments[0] !== "row") {
                            return "";
                        }
                        else {
                            pathSegments = pathSegments.slice(1);
                        }

                        let obj: unknown = row;
                        for (const segment of pathSegments) {
                            if (obj && typeof obj === "object") {
                                obj = obj[segment];
                            }
                            else {
                                obj = undefined;
                            }
                        }

                        return String(obj);
                    });

                    return value;
                };
            }

            columns.push({
                name,
                title: getVNodeProp<string>(node, "title"),
                field: getVNodeProp<string>(node, "field"),
                format: node.children?.["body"] ?? getVNodeProp<VNode>(node, "format") ?? textColumnValueComponent,
                sortField: getVNodeProp<string>(node, "sortField"),
                sortValue: sortValue,
                props: getVNodeProps(node)
            });
        }

        console.log("Columns", columns);

        return columns;
    }

    /*
     * 8/17/2022 - DSH
     *
     * The grid uses a number of non-ref instances with calculations via function call.
     * This is because the normal wrapped references that Vue uses dramatically slow
     * down our filtering and sorting processes. For example, filtering over wrapped
     * references of 100,000 rows takes around 600ms. The same 100,000 rows using an
     * unwrapped raw array takes about 40ms.
     */

    const props = defineProps({
        data: {
            type: [Object, Function] as PropType<GridData | (() => GridData | Promise<GridData>)>,
            default: []
        }
    });

    const slots = useSlots();

    const gridActions = ref<GridAction[]>([]);
    const currentPage = ref(1);
    const pageSize = ref(500);
    const pageSizes = [50, 500, 5000];
    const quickFilterValue = ref("");
    const loadingData = ref(false);
    const gridErrorMessage = ref("");
    const columnFilterValues = ref<Record<string, unknown | undefined>>({});
    const columnSortDirection = ref<{ column: string, isDescending: boolean } | undefined>();
    const visibleRows = ref<Record<string, unknown>[]>([]);
    const pageCount = ref(0);
    const pagerMessage = ref("");
    const visibleColumnDefinitions = ref<GridColumnDefinition[]>([]);
    let rows: Record<string, unknown>[] = [];
    const columns = computed((): GridColumnDefinition[] => {
        console.log("compute columns");
        return getColumnDefinitions(slots["default"]?.() ?? []);
    });

    let filteredRows: Record<string, unknown>[] = [];
    let sortedRows: Record<string, unknown>[] = [];

    const visibleColumnCount = computed((): number => {
        return visibleColumnDefinitions.value.length;
    });

    const updateFilteredRows = (): void => {
        const start = Date.now();
        if (columns.value.length > 0) {
            const columns = toRaw(visibleColumnDefinitions.value);
            const filterValue = quickFilterValue.value.toLowerCase();

            const result = rows.filter(v => {
                const quickFilterMatch = !filterValue || columns.some((column): boolean => {
                    const columnValue = v[column.name];
                    let value: string | undefined;

                    if (column.quickFilterValue) {
                        value = column.quickFilterValue(value);

                        if (value === undefined) {
                            return false;
                        }

                        value = value.toLowerCase();
                    }
                    else if (typeof columnValue === "string") {
                        value = columnValue;
                    }
                    else if (typeof columnValue === "number") {
                        value = columnValue.toString();
                    }
                    else {
                        value = undefined;
                    }

                    if (value === undefined) {
                        return false;
                    }

                    return value.toLowerCase().includes(filterValue);
                });

                const filtersMatch = columns.every(column => {
                    if (!column.filter) {
                        return true;
                    }

                    const columnFilterValue = columnFilterValues.value[column.name];

                    if (columnFilterValue === undefined) {
                        return true;
                    }

                    return column.filter(columnFilterValue, v[column.name]);
                });

                return quickFilterMatch && filtersMatch;
            });

            filteredRows = result;
        }
        else {
            filteredRows = [];
        }
        console.log(`Filtering took ${Date.now() - start}ms.`);

        updateSortedRows();
        updatePageCount();
        updatePagerMessage();
    };

    const updateSortedRows = (): void => {
        const start = Date.now();
        const sortDirection = columnSortDirection.value;

        if (sortDirection) {
            const column = visibleColumnDefinitions.value.find(c => c.name === sortDirection.column);
            const order = sortDirection.isDescending ? -1 : 1;

            if (!column) {
                throw new Error("Invalid sort definition");
            }

            const sortValue = column.sortValue;
            const sortField = column.sortField;

            const rows = [...filteredRows];

            if (sortValue || sortField) {
                rows.sort((a, b) => {
                    let valueA: string | number | undefined;
                    let valueB: string | number | undefined;

                    if (sortValue) {
                        valueA = sortValue(a, column);
                        valueB = sortValue(b, column);
                    }
                    else if (sortField) {
                        const columnValueA = a[sortField];
                        const columnValueB = b[sortField];

                        if (typeof columnValueA === "string" || typeof columnValueA === "number") {
                            valueA = columnValueA;
                        }
                        else {
                            valueA = undefined;
                        }

                        if (typeof columnValueB === "string" || typeof columnValueB === "number") {
                            valueB = columnValueB;
                        }
                        else {
                            valueB = undefined;
                        }
                    }
                    else {
                        return 0;
                    }

                    if (valueA === undefined) {
                        return -order;
                    }
                    else if (valueB === undefined) {
                        return order;
                    }
                    else if (valueA < valueB) {
                        return -order;
                    }
                    else if (valueA > valueB) {
                        return order;
                    }
                    else {
                        return 0;
                    }
                });
            }

            sortedRows = rows;
        }
        else {
            sortedRows = filteredRows;
        }
        console.log(`sortedRows took ${Date.now() - start}ms.`);

        updateVisibleRows();
    };

    const updateVisibleRows = (): void => {
        const startIndex = (currentPage.value - 1) * pageSize.value;

        visibleRows.value = sortedRows.slice(startIndex, startIndex + pageSize.value);
    };

    const updatePageCount = (): void => {
        pageCount.value = Math.ceil(filteredRows.length / pageSize.value);
    };

    const updatePagerMessage = (): void => {
        pagerMessage.value = `${asFormattedString(filteredRows.length)} ${pluralConditional(filteredRows.length, "Group", "Groups")}`;
    };

    const updateGridData = async (): Promise<void> => {
        loadingData.value = true;

        if (typeof props.data === "object") {
            const data = props.data;
            rows = data.rows;
        }
        else if (typeof props.data === "function") {
            try {
                const data = await props.data();
                rows = data.rows;
            }
            catch (error) {
                gridErrorMessage.value = error instanceof Error ? error.message : new String(error).toString();
            }
        }

        visibleColumnDefinitions.value = columns.value;
        updateFilteredRows();

        loadingData.value = false;
    };

    const onActionClick = (): Promise<void> => {
        return new Promise(resolve => setTimeout(resolve, 2000));
    };

    watch([quickFilterValue, columnFilterValues], () => {
        currentPage.value = 1;
        updateFilteredRows();
    });

    watch(columnSortDirection, () => {
        updateSortedRows();
    });

    watch([currentPage, pageSize], () => {
        updateVisibleRows();
    });

    gridActions.value.push({
        executing: false,
        handler: onActionClick,
        iconCssClass: "fa fa-question",
        tooltip: "This gives you help."
    });

    gridActions.value.push({
        executing: false,
        handler: onActionClick,
        iconCssClass: "fa fa-plus",
        tooltip: "Add a new item."
    });

    updateGridData();
</script>
