<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <Alert v-if="blockError" alertType="warning">{{ blockError }}</Alert>

    <Alert v-if="errorMessage" alertType="danger">{{ errorMessage }}</Alert>

    <DetailBlock v-if="!blockError"
                 v-model:mode="panelMode"
                 :name="panelName"
                 :labels="blockLabels"
                 :entityTypeGuid="entityTypeGuid"
                 entityTypeName="Group"
                 :isAuditHidden="false"
                 :isBadgesVisible="true"
                 :isDeleteVisible="false"
                 :isEditVisible="isEditable"
                 :isFollowVisible="true"
                 :isSecurityHidden="false"
                 @save="onSave">

        <template #view>
            <ViewPanel v-model="groupRegistrationViewBag" :options="options" />
        </template>

        <template #edit>
            <EditPanel v-model="groupRegistrationBag" :options="options" />
        </template>
    </DetailBlock>
</template>

<script setup lang="ts">
    import { computed, ref } from "vue";
    import Alert from "@Obsidian/Controls/alert.obs";
    import { EntityType } from "@Obsidian/SystemGuids/entityType";
    import DetailBlock from "@Obsidian/Templates/detailBlock";
    import { DetailPanelMode } from "@Obsidian/Enums/Controls/detailPanelMode";
    import { PanelAction } from "@Obsidian/Types/Controls/panelAction";
    import EditPanel from "./GroupRegistration/editPanel.partial.obs";
    import ViewPanel from "./GroupRegistration/viewPanel.partial.obs";
    import { useConfigurationValues, useInvokeBlockAction } from "@Obsidian/Utility/block";
    import { DetailBlockBox } from "@Obsidian/ViewModels/Blocks/detailBlockBox";
    import { GroupRegistrationBag } from "@Obsidian/ViewModels/Blocks/Groups/GroupRegistration/groupRegistrationBag";
    import { GroupRegistrationOptionsBag } from "@Obsidian/ViewModels/Blocks/Groups/GroupRegistration/groupRegistrationOptionsBag";

    const config = useConfigurationValues<DetailBlockBox<GroupRegistrationBag, GroupRegistrationOptionsBag>>();
    const invokeBlockAction = useInvokeBlockAction();

    // #region Values

    const blockError = ref("");
    const errorMessage = ref("");

    const groupRegistrationViewBag = ref(config.entity);
    const groupRegistrationBag = ref<GroupRegistrationBag>({} as GroupRegistrationBag);

    const entityTypeGuid = EntityType.Group;

    const panelMode = ref<DetailPanelMode>(DetailPanelMode.View);

    // The properties that are being edited in the UI. This is used to
    // inform the server which incoming values have valid data in them.
    const validProperties = [
        "firstName",
        "lastName",
        "email",
        "homePhone",
        "mobilePhone",
        "enableSms",
        "address",
        "spouseFirstName",
        "spouseLastName",
        "spouseMobilePhone",
        "enableSpouseSms",
        "spouseEmail"
    ];

    // #endregion

    // #region Computed Values

    /**
     * The entity name to display in the block panel.
     */
    const panelName = computed((): string => {
        return "Group Registration";
    });

    /**
     * The identifier key value for this entity.
     */

    /**
     * Additional labels to display in the block panel.
     */
    const blockLabels = computed((): PanelAction[] | undefined => {
        const labels: PanelAction[] = [];

        if (panelMode.value !== DetailPanelMode.View) {
            return undefined;
        }

        return labels;
    });

    const isEditable = computed((): boolean => {
        return config.isEditable === true;
    });

    const options = computed((): GroupRegistrationOptionsBag => {
        return config.options ?? { autoFill: true, isEmailRequired: true, isMobilePhoneRequired: false, openSpots: 2 };
    });

    // #endregion

    // #region Functions

    // #endregion

    // #region Event Handlers

    /**
     * Event handler for the panel's Save event. Send the data to the server
     * to be saved and then leave edit mode or redirect to target page.
     *
     * @returns true if the panel should leave edit mode; false if it should stay in edit mode; or a string containing a redirect URL.
     */
    async function onSave(): Promise<boolean | string> {
        errorMessage.value = "";

        const data: DetailBlockBox<GroupRegistrationBag, GroupRegistrationOptionsBag> = {
            entity: groupRegistrationBag.value,
            isEditable: true,
            validProperties: validProperties
        };

        const result = await invokeBlockAction<GroupRegistrationBag | string>("Save", {
            box: data
        });

        if (result.isSuccess && result.data) {
            if (result.statusCode === 200 && typeof result.data === "object") {
                groupRegistrationViewBag.value = result.data;
                config.isEditable = false;
                return true;
            }
            else if (result.statusCode === 201 && typeof result.data === "string") {
                return result.data;
            }
        }

        errorMessage.value = result.errorMessage ?? "Unknown error while trying to save group.";

        return false;
    }

    // #endregion

    // Handle any initial error conditions or the need to go into edit mode.
    if (config.errorMessage) {
        blockError.value = config.errorMessage;
    }
    else if (!config.entity) {
        blockError.value = "The specified group could not be viewed.";
    }
    else {
        groupRegistrationBag.value = config.entity;
        panelMode.value = DetailPanelMode.Add;
    }
</script>
